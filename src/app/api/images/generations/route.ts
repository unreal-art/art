import { NextResponse } from "next/server"
import OpenAI from "openai"
import { getUser } from "@/queries/user"
import { createClient, SupabaseClient } from "@supabase/supabase-js"
import appConfig from "@/config"
import { uploadBase64Image } from "./cloudflare"
import Bluebird from "bluebird"
// Types for better type safety
interface ImageGenerationRequest {
  inputs: {
    Prompt: string
    Seed?: number
    n?: number
  }
  author: string
  category: string
}

interface UploadResult {
  url: string
  key: string
}

// Initialize OpenAI client once
const initializeOpenAI = (apiKey: string): OpenAI => {
  return new OpenAI({
    baseURL: appConfig.services.openai.apiUrl,
    apiKey,
  })
}

// Input validation
const validateRequest = (requestData: any): ImageGenerationRequest => {
  if (!requestData.inputs?.Prompt) {
    throw new Error("Prompt is required")
  }
  if (!requestData.author) {
    throw new Error("Author is required")
  }
  if (!requestData.category) {
    throw new Error("Category is required")
  }

  return requestData as ImageGenerationRequest
}

// Utility function to clean filename
const generateFileName = (prompt: string, index?: number): string => {
  const baseFileName = prompt
    .replace(/[^a-zA-Z0-9\s-]/g, "")
    .replace(/\s+/g, "_")
    .substring(0, 50)
    .toLowerCase()

  const timestamp = Date.now()
  return index !== undefined
    ? `${baseFileName}_${index + 1}_${timestamp + index}`
    : `${baseFileName}_${timestamp}`
}

// Background processing function (no await needed)
const processImageGeneration = async (
  requestData: ImageGenerationRequest,
  userId: string,
  openai: OpenAI,
  supabaseClient: SupabaseClient
) => {
  try {
    const n = requestData.inputs.n || 1

    console.log(
      `n=${n}; seed=${requestData.inputs.Seed}; prompt=${requestData.inputs.Prompt}`
    )
    const baseSeed =
      requestData.inputs.Seed || Math.floor(Math.random() * 1000000)
    const prompt = requestData.inputs.Prompt
    const uploadResults: UploadResult[] = []

    // Helper to generate a single image with a unique seed
    const generateAndUpload = async (seed: number, index: number) => {
      try {
        const result = await openai.images.generate({
          prompt,
          model: "unreal::playground-v2-5-1024px-aesthetic",
          //@ts-ignore
          seed,
          response_format: "b64_json",
          n: 1,
        })
        if (!result.data || result.data.length === 0) {
          throw new Error("No images generated by OpenAI")
        }
        const base64Image = result.data[0].b64_json
        if (!base64Image) {
          throw new Error("No base64 image data received from OpenAI")
        }
        const fileName = generateFileName(prompt, index)
        const uploadResult = await uploadBase64Image(
          userId,
          base64Image,
          fileName
        )
        uploadResults.push(uploadResult)
        return uploadResult
      } catch (err) {
        console.error(
          `[Background] Error generating/uploading image (seed=${seed}):`,
          err
        )
        return null
      }
    }

    // If n > 1, fire off n single-image generations in parallel (fire-and-forget)
    const promises: Promise<UploadResult | null>[] = []
    for (let i = 0; i < n; i++) {
      const seed = baseSeed + i
      promises.push(generateAndUpload(seed, i))
    }
    let result = await Bluebird.map(
      promises,
      async (p: Promise<Boolean>) => {
        // console.log(p)
        return await p
      },
      {
        concurrency: Math.min(promises.length, 4),
      }
    )

    console.log(`[Background] Uploaded ${uploadResults.length} images`)

    // Insert post into database
    const { data, error } = await supabaseClient
      .from("posts")
      .insert({
        author: requestData.author,
        isPrivate: false,
        prompt,
        category: requestData.category,
        ipfsImages: uploadResults,
      })
      .select()
      .single()

    if (error) {
      throw new Error(`Database insertion failed: ${error.message}`)
    }

    console.log(`[Background] Post created successfully:`, data.id)
  } catch (error) {
    console.error(`[Background] Error processing image generation:`, error)
    // Optional: Insert error record or notification
    try {
      await supabaseClient.from("posts").insert({
        author: requestData.author,
        isPrivate: false,
        prompt: requestData.inputs.Prompt,
        category: requestData.category,
        ipfsImages: [],
        status: "failed",
        error_message: error instanceof Error ? error.message : "Unknown error",
      })
    } catch (insertError) {
      console.error(`[Background] Failed to insert error record:`, insertError)
    }
  }
}

export async function POST(req: Request) {
  const supabaseUrl = appConfig.services.supabase.url as string
  const private_SRK = appConfig.services.supabase.SRK as string
  const openaiApiKey = appConfig.services.openai.apiKey as string

  // Quick configuration check
  if (!supabaseUrl || !private_SRK || !openaiApiKey) {
    return NextResponse.json(
      {
        status: false,
        message: "Missing required configuration",
      },
      { status: 500 }
    )
  }

  try {
    // Parse and validate request (fast operations)
    const requestBody = await req.json()
    const requestData = validateRequest(requestBody)

    // Quick user authentication
    const user = await getUser()
    if (!user || !user.id) {
      return NextResponse.json(
        {
          status: false,
          message: "User not authenticated",
        },
        { status: 401 }
      )
    }

    // Initialize clients
    const openai = initializeOpenAI(openaiApiKey)
    const secretSupabaseClient = createClient(supabaseUrl, private_SRK)

    // Start background processing (don't await)
    processImageGeneration(requestData, user.id, openai, secretSupabaseClient)

    // Return immediate success response
    return NextResponse.json({
      status: true,
      message: "Image generation started",
      data: {
        prompt: requestData.inputs.Prompt,
        author: requestData.author,
        category: requestData.category,
        estimated_processing_time: "10-30 seconds",
      },
    })
  } catch (error: unknown) {
    console.error("Error starting image generation:", error)

    // Handle validation errors quickly
    if (error instanceof Error) {
      if (
        error.message.includes("required") ||
        error.message.includes("invalid")
      ) {
        return NextResponse.json(
          {
            status: false,
            message: error.message,
          },
          { status: 400 }
        )
      }
    }

    return NextResponse.json(
      {
        status: false,
        message: "Failed to start image generation",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    )
  }
}
